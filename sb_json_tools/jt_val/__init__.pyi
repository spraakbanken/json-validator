from . import exceptions as exceptions
from typing import Dict, Generator, Iterable, List, Optional, Tuple, Union

def ok(item: Dict) -> Tuple[Dict, None]: ...
def error(item: Dict, msg: str) -> Tuple[None, Dict]: ...
def streaming_validate(schema: Dict, data: Union[Dict, Iterable[Dict]], *, raise_on_error: bool=...) -> Generator[Tuple[Optional[Dict], Optional[Dict]], None, None]: ...
def validate(schema: Dict, data: Union[Dict, Iterable[Dict]], *, raise_on_error: bool=...) -> Tuple[List[Dict], List[Dict]]: ...
def processing_validate(schema: Dict, data: Union[Dict, Iterable[Dict]], on_ok: Generator[None, Dict, None], on_error: Generator[None, Dict, None]) -> None: ...
